{{define "title"}}
Condition Action
{{end}}


{{define "content"}}
 

<div id="addcg"> 
     
            <form action="/conditiongroups/{{.EndPoint.ID}}/{{if .Form.ID}}update/{{.Form.ID}}{{else}}add{{end}}"
                method="POST">
                <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
                <input type="hidden" name="id" value="{{.Form.ID}}">

                <div class="row p-2">
                    <div class="col">
                      <div class="card ">
                        <div class="card-header">
                            <p class="h5">{{if .Form.ID}} Edit {{else}} Add {{end}} Condition Action
                            </p>
                  
                        </div>
                          <div class="card-body">
                     

                <div class="form-group">
                    <label for="conditionname">Name</label>
                    <input id="conditionname" class="form-control {{with .Form.FieldErrors.name}} is-invalid {{end}}"
                        type="text" name="name" aria-describedby="conditionnamehelp" placeholder="Condition Action name"
                        value='{{.Form.Name}}' required></input>


                    <!-- Use the `with` action to render the value of .Form.FieldErrors.title if it is not empty. -->

                    {{with .Form.FieldErrors.name}}
                    <div class='invalid-feedback'>{{.}}</div>
                    {{end}}
                </div>
            </div>
        </div>
    </div>
    </div>


                <div class="row px-2">
                    <div class="col">
                <div class="card ">
                    <div class="card-header">
                        <p class="h5">Conditions
                        </p>
              
                        </div>
                      <div class="card-body">
              
                        <div class="alert alert-secondary" role="alert">

                <button data-toggle="tooltip" data-placement="bottom" title="Add condition to list"  class="btn btn-info btn-sm" type="button" value="Add Row" onclick="addRow('conditiontable')">
                    <svg class="c-icon">
                        <use xlink:href="/static/coreui/vendors/coreui/icons/svg/free.svg#cil-plus"></use></svg></button>

                <button data-toggle="tooltip" data-placement="bottom" title="Delete selected from list"  class="btn btn-danger btn-sm" type="button" value="Delete Row"
                    onclick="deleteRow('conditiontable')">
                    <svg class="c-icon">
                        <use xlink:href="/static/coreui/vendors/coreui/icons/svg/free.svg#cil-trash"></use></svg>
                </button>
                    </div>
                <TABLE 
                class="table   table-bordered table-responsive-sm table-hover    "
                id="conditiontable">

                 

                    <TR>
                        <TD><INPUT class="form-check" type="checkbox" name="chk" /></TD>
                        <td>New</td>

                        <TD>
                            <SELECT class="form-control" name="conditionids">
                                <OPTION value="">Please select a condition</OPTION>

                                {{if .Conditions}}
                                {{range .Conditions}}
                                <OPTION value="{{.ID}}">{{.Name}}</OPTION>
                                {{end}}
                                {{end}}
                            </SELECT>
                        </TD>
                    </TR>

                    {{if .Form.ConditionIDs}}
                    {{range $FormConditionId := .Form.ConditionIDs}}
                    <TR>
                        <TD>
                            <INPUT class="form-check" type="checkbox" name="chk" /></TD>
                        <td>Active</td>
                        <TD>
                            <SELECT class="form-control" name="conditionids">

                                {{if $.Conditions}}
                                {{range $Condition := $.Conditions}}
                                <OPTION {{if eq $FormConditionId $Condition.ID}} selected {{end}}
                                    value="{{$Condition.ID}}">
                                    {{$Condition.Name}}</OPTION>
                                {{end}}
                                {{end}}

                            </SELECT>
                            <small></small>
                        </TD>
                    </TR>
                    {{end}}
                    {{end}}
                  

                </TABLE>

                </div>
                </div>
            </div>
        </div>



        <div class="row px-2">
            <div class="col-8">
                 <div class="card h-100">
            <div class="card-header">
                <p class="h5">If all these conditions are true.
                </p>
      
                </div>
              <div class="card-body">
                
                {{if  .EndPoint.ActualURL}}
                    <!-- <div class="alert alert-secondary" role="alert">

                            <div class="form-check">
                                <input value='true' {{if .Form.CallActualEndPoint}} checked {{end}} type="checkbox"
                                class=" form-check-input" name="callactualendpoint" id="callactualendpoint">
                                <label class="form-check-label" for="callactualendpoint"><h6>Call
                                    {{.EndPoint.ActualURL}}. <strong>Response from this API will be the final response</strong></h6></label>
                            </div>
                    
                    </div> -->
               
                {{end}}



             <SELECT id="httpstatuscode" @change="onHttpCodeChange($event)" v-model="httpcodeselect" class="form-control" name="httpstatuscode">
 
            

                    <option v-for="httpcode in httpcodes" :value="httpcode.value">
                        [[ httpcode.text ]]
                      </option>
            </SELECT>

            <br />
            <br />


                




                    <TABLE 
                    class="table   table-borderless table-responsive-sm table-striped    "

                    id="assignmenttable">

                    <thead class="thead-dark">
                        <tr>
                            <th data-orderable="false">Response parameter:</th>
                                <th data-orderable="false">Assign Value:</th>


                            </tr>
                        </thead>
                        <tbody>





                             <tr v-for="(pram, index) in responseprams" >
                                <td>

                                    [ [[pram.responsevariabledatatype]] ]
                                    [[pram.responsevariablename]]

                                    <input type="hidden"
                                        :name="'responseandconditiongroupmap['+index+'].responsevariable'"
                                        :value='pram.responsevariable' readonly></input>

                                    <input type="hidden"
                                        :name="'responseandconditiongroupmap['+index+'].responsevariabledatatype'"
                                        :value='pram.responsevariabledatatype'
                                        readonly></input>







                                    <div class="form-group">
                                        <input id="responsevariablename"
                                            class="form-control "
                                            type="hidden"
                                            :name="'responseandconditiongroupmap['+index+'].responsevariablename'"
                                            aria-describedby="responsevariablenamehelp" placeholder="Value"
                                            :value='pram.responsevariablename'
                                            readonly></input>
                                    </div>
                                </td>
                                <td>
                                    <div class="form-group">
                                        <input id="assignvalue"
                                            class="form-control"
                                            :class = "{ 'is-invalid' :  !isEmpty(pram.errormessage) }"
                                            type="text" 
                                            :name="'responseandconditiongroupmap['+index+'].assignvalue'"
                                            aria-describedby="assignvaluehelp" placeholder="Value"
                                            :value='pram.assignvalue'></input>


                                        <!-- Use the `with` action to render the value of .Form.FieldErrors.title if it is not empty. -->

                                         <div class='invalid-feedback'>[[pram.errormessage]]</div>
                                       
                                    </div>
                                </td>


     
                            </tr>
                  
            

                        </tbody>

                    </TABLE>


                    <!--  ASSIGN VALUES end-->







                    <br />
                    <button type="submit" class="btn btn-info">                  <svg class="c-icon">
                        <use xlink:href="/static/coreui/vendors/coreui/icons/svg/free.svg#cil-check-alt"></use></svg>
                        Submit</button>


                </div>
                </div>
            </div>

            <div class="col-4">

                <div class="card h-100">
                    <div class="card-header">
                        <p class="h5">Available Special values
                        </p>
              
                        </div>
                      <div class="card-body">


                <table id="availablespecialvals" 
                class="table   table-borderless table-responsive-sm table-striped    ">
                <thead class="thead-dark">
                    <tr>
                      <th>Special values</th>
              
                       
              
                    </tr>
                  </thead>
                  <tbody>
                    {{ range .RequestParamAutoComplateList}}
                    <tr>
                        <td>
                            {{.}}
                        </td>
                    </tr>
                    {{end}}
                  </tbody>
                  </table>
                     
            </div>     
        </div>
            </div>
        </div>
            </form>
        </div>
{{end}}

{{define "aftercontent"}}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.14/dist/css/bootstrap-select.min.css">
<script src="https://cdn.jsdelivr.net/npm/bootstrap-select@1.13.18/dist/js/bootstrap-select.min.js"></script>


<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.13.1/css/jquery.dataTables.css">
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.13.1/js/jquery.dataTables.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.6.12" type="text/javascript"></script>

<script src="https://unpkg.com/axios/dist/axios.min.js" type="text/javascript"></script>


<script>
    $.fn.selectpicker.Constructor.BootstrapVersion = '4';
    $(document).ready(function () {


    });
</script>

<style>
    .container {
        margin: 100px auto;
    }
</style>
 
 
<script>
  $(document).ready(function () {
    $('#availablespecialvals').DataTable({
      "language": {
        "emptyTable": "No records."
      }
    });
  });


















  let cg_params = new Vue({

el: "#addcg",
delimiters: ['[[', ']]'],

data() {
    return {

        responseprams:[
        {{if .Form.ConditionGroupParameters}}

            {{range $index,$ConditionGroupParameters := .Form.ConditionGroupParameters}}
            {index: {{$index}},
            assignvalue: "{{$ConditionGroupParameters.AssgineValue}}",
            responsevariable:"{{$ConditionGroupParameters.ResponseVariable}}",
            responsevariabledatatype:"{{$ConditionGroupParameters.ResponseParam.DefaultDatatype}}",
            responsevariablename:"{{$ConditionGroupParameters.ResponseVariableName}}",
            errormessage:"{{with $ConditionGroupParameters.FieldErrors.assignvalue}} {{.}} {{end}}",
 
            },
            {{end}}
        {{end}}


        ],
         
        httpcodes:[
                    {{if .EndPoint.ResponseMap}}
                    {{range .EndPoint.ResponseMap}}
                     { value: "{{.ID}}" , text: "{{.Name}}: {{.HttpCode}} {{ httpCodeText .HttpCode}} " } ,
                    {{end}}
                    {{end}}
        ],
        httpcodeselect:{{.Form.ResponseID}},
     }
},

computed: {
   

 },




mounted() {
   try {
     
    }
    catch (error) {
       // console.error(error)

     }

},
methods: {


    isEmpty(str) {
    return (!str || str.length === 0 ); 
    },

    onHttpCodeChange(event) {
            console.log(event.target.value)
            let endpoint_id = "{{.EndPoint.ID}}"
            let httpcode = event.target.value
            //console.(httpcode)
            let cgparmid = "{{if .Form.ID}}/{{.Form.ID}}{{else}}{{end}}"
            let config = {
            headers: {
                "X-CSRF-Token": "{{.CSRFToken}}",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        }
        let data = {}
        var local = this
        //this.showModal = true
        //local.processing = true

        axios.get('/conditiongroups/'+endpoint_id+'/parms/'+httpcode+cgparmid, data, config)
        .then(function (response) {

           local.responseprams = response.data

        }).catch(function (error) {

            // handle error
            // console.log(error);
        }).then(function () {
            //local.showModal = false
            //local.processing = false
            //handler()
            // always executed
        });
        },



    donothing(e) {
        e.preventDefault();
        e.stopPropagation();
    },
    loadParams(epid, httpcode, cgparmid) {




    },
 



}
});


</script>














{{end}}